<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/styles.css">
  <script src="/JS/loginLogoutUser.js"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=MedievalSharp&display=swap" rel="stylesheet">
  <title>Decks</title>
</head>
<body>
  <header>
    <h2 class="logo-mtg-name">MTG Collection Tracker</h2>

    <nav class="nav">
      <ul>
        <li class="nav-link"><a href="/">Collection</a></li>
        <li class="nav-link"><a href="decks">Decks</a></li>
        <li class="nav-link"><a href="about">About</a></li>
        <li class="nav-link"><a href="help">Help</a></li>
      </ul>
    </nav>

    <div class="login-panel">
      <h4 id="loginPanelInfo" >Please <a href="#" class="openBox" origin="login">login</a> or <a href="#" class="openBox" origin="signup">create an account</a></h4>
      <div id="signup" class="signup-box">
        <div class="box-content">
          <div class="signup-form">
            <a class="close">&times;</a>
            <div class="openedSignupBox">
              <h3>Create New Account</h3>
              <div>
                <label for="first_name">First Name: </label> <input type="text" id="first_name" name="first_name" placeholder="Insert First Name"><br> 
                <label for="last_name">Last Name: </label><input type="text" id="last_name" name="last_name" placeholder="Insert Last Name"><br>
                <label for="username">@Username*: </label><input type="text" id="username" name="username" placeholder="NewCoolUsername" required><br>
                <label for="email">Email*: </label><input type="email" id="email" pattern=".+@globex\.com" placeholder="Insert Your Email" size="30" required><br>
                <label for="pass">Password* (8 characters minimum): </label> <input type="password" id="pass" name="password" minlength="8" required><br>
                <button type="submit" onclick="javascript:createNewUser()">Create New User Account</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div id="login" class="signup-box">
      <div class="box-content">
        <div class="signup-form">
          <a class="close">&times;</a>
          <div class="openedSignupBox">
            <h3>Create New Account</h3>
            <div>
              <label for="login-email">Email*: </label><input type="email" id="login-email" pattern=".+@globex\.com" placeholder="Insert Your Email" size="30" required><br>
              <label for="login-password">Password* (8 characters minimum): </label> <input type="password" id="login-password" name="password" minlength="8" required><br>
              <button type="submit" onclick="javascript:loginUser()">Login</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </header>
    
  <a href="db-info">Check DB insert and info</a>
  <br><br>
  
  <fieldset class="create-deck">
    <legend>Create a new Deck:</legend>
    <label for="newDeckName">Deck Name:</label>
    <input type="text" id="newDeckName" name="newDeckName"><br>
    <label for="deckDesc">Description:</label>
    <input type="text" id="deckDesc" name="deckDesc"><br>
    <label for="deckFormat">Format:</label>
    <select name="deckFormat" id="deckFormat">
      <option value="0">Format</option>
      <option value="1">Standard</option>
      <option value="2">Modern</option>
      <option value="3">Vintage</option>
      <option value="4">Legacy</option>
      <option value="5">Pauper</option>
      <option value="6">Commander</option>
      <option value="7">Brawl</option>
      <option value="8">Historic</option>
      <option value="9">Pioneer</option>
    </select><br><br>
    <input type="submit" id="createNewDeck" onclick="javascript:createDeck()" value="Create Deck">

    <p id="deckCreateMsg"></p>
  </fieldset>

  <fieldset class="add-card">
    <legend><p>Add card to deck</p></legend>
    <label for="cardSelection">Card name: </label> <input type="text" name="cardSelection" id="cardSelectionInput" placeholder="Insert card name">
    <input type="submit" name="submitCardSelection" value="Select Card" onclick="javascript:getCardInfo()"><br>
    <p id="card-selected-info"></p>
    <label for="numOfCopies">Copies:</label>
    <input type="number" name="numOfCopies" id="num-of-copies" min="1" max="99" value="1"><br>
     
    <input type="submit" name="addCard" value="Add Card to Deck" onclick="addCardToDeck()">

    

    <div id="display-card-options">
      <a class="close">&times;</a>
      <span><b>Select your cards:</b></span>
      <div class="display-cards-result" id="display-cards-result">
      </div>
      
    </div>

  </fieldset> <!-- end of add card element -->

  <br><br><br><br><br><br><br><br><label for="selDeck">Select Deck: </label>
  <select name="selDeck" id="selDeck">
    <% decks.forEach(function(r) { %>
      <% if (decks !== null) { %>
        <option value="<%= r.deck_name %>"><%= r.deck_name %></option>
      <% }; %>
    <% }); %>
  </select>
  <input type="submit" id="displayDeck" value="Select Deck" onclick="javascript:selDeckDisplay()">

  <div id="selDeckDisplay">
    <% deck_cards.forEach(function(r) { %>
    <h3 id="selDeckName"><%= r.deck_name %></h3>
    <p id="selDeckFormat"><%= r.type_id %></p>
    <table id="deckList">
      <th>Cards</th>
      <td id="cardInfo"><%= r.card_id %></td>
    </table>
    <% }); %>
  </div>
  
  <script>
    // Create a new deck and add it to the database
    const createDeck = async function() {
      const newDeckName = document.getElementById('newDeckName').value;
      const deckDesc = document.getElementById('deckDesc').value;
      const deckFormat = document.getElementById('deckFormat').value;
      const userId = currentUserId;
      console.log(userId);

      const response = await fetch('/createDeck', {
        method: 'POST', 
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          deck_name: newDeckName,
          deck_desc: deckDesc,
          deck_format: deckFormat,
          user_id: userId
        })
      });
      
      const result = await response.text();
      document.getElementById('deckCreateMsg').innerHTML = result;
    }

    const addCardToDeck = async function() {
      const selDeck = document.getElementById('selectDeck');
      const selCard = cardSelected;

      if (!selDeck || !selCard) {
        alert("Please, select a valid deck and a card to put into it.")
      } else {
              
        const response = await fetch('/addToDeck', {
          method: 'POST', 
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            deck_id: selDeck,
            card_id: selCard
          })
        });
        
        const result = await response.json();
      }
    }

    // Fetch card info from API
    const getCardInfo = async function() {
      const cardName = document.getElementById('cardSelectionInput').value;

      if (cardName.trim() === "") {
        alert("Please, insert a valid input to search for a card.")
      } else {
              
        const response = await fetch('/fetchCard', {
          method: 'POST', 
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            card_name: cardName
          })
        });
        
        const result = await response.json();
        
        let showResultsWindow = document.getElementById('display-cards-result');
        showResultsWindow.innerHTML = "";

        // Checks if card name inserted is valid. If card not found, a message with an error will be informed. Otherwise displays the image and card text
        if (result.cards === undefined) {
          errorFecthingCard(showResultsWindow, "Card not found with this name.")
        } else {
          let cardsFounded = result.cards;
          console.log(cardsFounded.length);
          if (cardsFounded.length >= 20) {
            errorFecthingCard(showResultsWindow, "Too many cards were founded with this name. Please, provide a specific name for the card.")            
          } else {
            
            cardsFounded.forEach(card => {
              let cardNameDisplay = document.createElement('span');
              cardNameDisplay.innerText = "Card name:" + card.name;
              let cardImageDisplay = document.createElement('img');
              cardImageDisplay.setAttribute('src', card.imageUrl);
              cardImageDisplay.setAttribute('class', 'card-image-result');
              showResultsWindow.append(cardNameDisplay, cardImageDisplay);
              cardImageDisplay.onclick = function () {
                let cardSelectedDisplayInfo = document.getElementById('card-selected-info');
                cardSelectedDisplayInfo.style.display = "block";
                cardSelectedDisplayInfo.innerText = `Card selected: "${card.name}" number ${card.number} from set "${card.setName}".`;
                document.getElementById('display-card-options').style.display = "none";
                cardSelected = card;
              };
            });

            console.log(result.cards);
          }
        }
        document.getElementById('display-card-options').style.display = "block";
      }
    };

    // Display a message on the selecting card box when no card found, too many cards result, or incorrect name entered.
    function errorFecthingCard(showResultsWindow, errorMessage) {
      
      let displayErrorMessage = document.createElement('span');
      displayErrorMessage.innerText = errorMessage;
      showResultsWindow.appendChild(displayErrorMessage);
    }
/*
    const selDeckDisplay = async function() {
      const selDeckName = document.getElementById('selDeckName');
      const selDeckFormat = document.getElementById('selDeckFormat');
      const cardInfo = document.getElementById('cardInfo');

      if (selDeck !== null) {
        const response = await fetch('/displayDeck', {
          method: 'POST', 
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            deck_name: selDeckName,
            type_id: selDeckFormat,
            card_id: 
          })
        });
    }
    */
  </script>
  <script src="/JS/loginPanels.js"></script>
</body>
</html>