<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" type="text/css" href="css/styles.css">
  <title>MTG Collection Tracker App</title>
  <script src="/JS/loginLogoutUser.js"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=MedievalSharp&display=swap" rel="stylesheet">
</head>
<body>
  <header >
    <div class="logo-mtg-name">
    <h2>MTG Collection Tracker</h2></div>

    <nav class="nav">
      <ul>
        <li class="nav-link"><a href="/">Collection</a></li>
        <li class="nav-link"><a href="decks">Decks</a></li>
        <li class="nav-link"><a href="about">About</a></li>
        <li class="nav-link"><a href="help">Help</a></li>
      </ul>
    </nav>

    <div class="login-panel">
      <h4 id="loginPanelInfo" >Please <a href="#" class="openBox" origin="login">login</a> or <a href="#" class="openBox" origin="signup">create an account</a></h4>
      <div id="signup" class="signup-box">
        <div class="box-content">
          <div class="signup-form">
            <a class="close">&times;</a>
            <div class="openedSignupBox">
              <h3>Create New Account</h3>
              <div>
                <form action="/">
                  <label for="first_name">First Name: </label> <input type="text" id="first_name" name="first_name" placeholder="Insert First Name"><br> 
                  <label for="last_name">Last Name: </label><input type="text" id="last_name" name="last_name" placeholder="Insert Last Name"><br>
                  <label for="username">@Username*: </label><input type="text" id="username" name="username" placeholder="NewCoolUsername" required="true"><br>
                  <label for="email">Email*: </label><input type="email" id="email" placeholder="Insert Your Email" size="30" required="true"><br>
                  <label for="pass">Password*: </label> <input type="password" id="pass" name="password" minlength="8" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}" title="Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters" required="true"><br>
                  <button type="submit" onclick="javascript:createNewUser()">Create New User Account</button>
                  <div id="password-message">
                    <h3>Password must contain the following:</h3>
                    <p id="letter" class="invalid">A <b>lowercase</b> letter</p>
                    <p id="capital" class="invalid">A <b>capital (uppercase)</b> letter</p>
                    <p id="number" class="invalid">A <b>number</b></p>
                    <p id="length" class="invalid">Minimum <b>8 characters</b></p>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div id="login" class="signup-box">
        <div class="box-content">
          <div class="signup-form">
            <a class="close">&times;</a>
            <div class="openedSignupBox">
              <h3>Create New Account</h3>
              <div>
                <label for="login-email">Email*: </label><input type="email" id="login-email" pattern=".+@globex\.com" placeholder="Insert Your Email" size="30" required><br>
                <label for="login-password">Password* (8 characters minimum): </label> <input type="password" id="login-password" name="password" minlength="8" required><br>
                <button type="submit" onclick="javascript:loginUser()">Login</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </header>

  <a href="db-info">Check DB insert and info</a>
  <br>
  <br>
  
  <fieldset class="add-card">
    <legend><p>Add card</p></legend>
    <label for="cardSelection">Card name: </label> <input type="text" name="cardSelection" id="cardSelectionInput" placeholder="Insert card name">
    <input type="submit" name="submitCardSelection" value="Select Card" onclick="javascript:getCardInfo()"><br>
    <p id="card-info">Card Selected: <span id="card-selected-info">-</span></p>
    <label for="numOfCopies">Copies:</label>
    <input type="number" name="numOfCopies" id="num-of-copies" min="1" max="99" value="1">
    <span>Foiled:</span>
    <input type="radio" name="foiled" id="yes-foiled" value="true"><label for="foiled">Yes</label>
    <input type="radio" name="foiled" id="not-foiled" value="false" checked="false"><label for="notFoiled">No</label>
    <br>
    
    <input type="submit" name="addCard" value="Add Card" onclick="addCardToCollection()">

    <div id="display-card-options">
      <a class="close">&times;</a>
      <span><b>Select your cards:</b></span>
      <div class="display-cards-result" id="display-cards-result">
      </div>
      
    </div>
  </fieldset> <!-- end of add card element -->

  <form id="filter">
    <fieldset class="filter-cards">
      <legend><p>Filters:</p></legend>
      <input type="checkbox" id="red_type" name="card_type" placeholder="Red type of mana">Red Mana Type
      <input type="checkbox" id="black_type" name="card_type" placeholder="Black type of mana">Black Mana Type
      <input type="checkbox" id="blue_type" name="card_type" placeholder="Blue type of mana">Blue Mana Type
      <input type="checkbox" id="white_type" name="card_type" placeholder="White type of mana">White Mana Type<br>
      <input type="checkbox" id="green_type" name="card_type" placeholder="Green type of mana">Green Mana Type
      <input type="checkbox" id="none_type" name="card_type" placeholder="None type of mana">None Mana Type<br>
      <input type="submit" value="Filter Table">
    </fieldset>
  </form>

  <form id="sort">
    <fieldset class="sort">
      Sort by: <select name="sort_cards" id="sort_cards">
        <option>Sort</option>
        <option>Name</option>
        <option>Mana cost</option>
      </select>
      <input type="submit" value="Sort">
    </fieldset>
  </form>
  

  <div id="card-table">
    <div id="card-table-content">
      <aside id="card-table-menu">
        <ul>
          <li onclick="showCardsByTypes(this)">All</li>
          <li onclick="showCardsByTypes(this)">Artifact</li>
          <li onclick="showCardsByTypes(this)">Conspiracy</li>
          <li onclick="showCardsByTypes(this)">Creature</li>
          <li onclick="showCardsByTypes(this)">Dungeon</li>
          <li onclick="showCardsByTypes(this)">Enchantment</li>
          <li onclick="showCardsByTypes(this)">Instant</li>
          <li onclick="showCardsByTypes(this)">Land</li>
          <li onclick="showCardsByTypes(this)">Phenomenon</li>
          <li onclick="showCardsByTypes(this)">Plane</li>
          <li onclick="showCardsByTypes(this)">Planeswalker</li>
          <li onclick="showCardsByTypes(this)">Scheme</li>
          <li onclick="showCardsByTypes(this)">Sorcery</li>
          <li onclick="showCardsByTypes(this)">Tribal</li>
          <li onclick="showCardsByTypes(this)">Vanguard</li>
        </ul>
      </aside>
      <section id="card-table-display">
      <div class="cards_box">
        <div id="cards_row" class="cards_row">
          <div id="red_card" class="card">3 cost Red</div>
          <div id="black_card" class="card">6 cost Black</div>
          <div id="blue_card" class="card">2 cost Blue</div>
          <div id="white_card" class="card">4 cost White</div>
          <div id="green_card"  class="card">5 cost Green</div>
          <div id="none_card" class="card">1 cost None</div>
        </div>
      </div>
      <table id="myTable">
        <thead>
          <tr>
            <th>Multiver ID</th>
            <th>Card Name</th>
            <th>Mana Cost</th>
            <th>Card Type</th>
            <th>Card Subtypes</th>
            <th>Set Name</th>
            <th>Power</th>
            <th>Toughness</th>
            <th>Copies</th>
            <th>Foiled</th>
            <th>Card Image</th>
            <th>Edit</th>
            <th>Delete</th>
          </tr>
        </thead>
        <tbody id="card-tables-body">
          <tr id="empty-row">
            <td>&nbsp;&nbsp;</td>
            <td>&nbsp;&nbsp;</td>
            <td>&nbsp;&nbsp;</td>
            <td>&nbsp;&nbsp;</td>
            <td>&nbsp;&nbsp;</td>
            <td>&nbsp;&nbsp;</td>
            <td>&nbsp;&nbsp;</td>
            <td>&nbsp;&nbsp;</td>
            <td>&nbsp;&nbsp;</td>
            <td>&nbsp;&nbsp;</td>
            <td>&nbsp;&nbsp;</td>
          </tr>
        </tbody>
      </table>
      </section>
    </div>
  </div>
  <script src="/JS/displayCardsTable.js"></script>
  <script src="/JS/loginPanels.js"></script>
  <script src="/JS/validatePassword.js"></script>
  <script>
    
    // To store card info once users search for a card and select one from the options served by the API.
    let cardSelected;
    
    // Fetching card from API
    const getCardInfo = async function() {
      const cardName = document.getElementById('cardSelectionInput').value;

      // Checks if input it's not empty. If not, fetch the API on the backend with /fetchCard method to get the card's info with the card name provided by the user.
      if (cardName.trim() === "") {
        alert("Please, insert a valid input to search for a card.")
      } else {
              
        const response = await fetch('/fetchCard', {
          method: 'POST', 
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            card_name: cardName
          })
        });
        
        const result = await response.json();
        
        // Clean the element for showing if card was selected. 
        let showResultsWindow = document.getElementById('display-cards-result');
        showResultsWindow.innerHTML = "";
        
        // Checks if card name inserted is valid. If card not found, a message with an error will be informed.
        if (result.length === 0) {
          errorFecthingCard(showResultsWindow, "Card not found with this name.");
        } else {
          const cardsFounded = result.cards;
          
          // Checks if the result from the seach is too big to display and prompt a message to fix in case is bigger 20 cards. Otherwise displays the image and card text
          if (cardsFounded.length >= 30) {
            errorFecthingCard(showResultsWindow, "Too many cards were founded with this name. Please, provide a specific name for the card.");
          } else {
            
            // Loop through the card array fetched by the api with user's input info for card name. Display's each card in the array in a popup box showing the card image and card name.
            cardsFounded.forEach(card => {
              let cardNameDisplay = document.createElement('span');
              cardNameDisplay.innerText = "Card name:" + card.name;
              let cardImageDisplay = document.createElement('img');
              cardImageDisplay.setAttribute('src', card.imageUrl);
              cardImageDisplay.setAttribute('class', 'card-image-result');
              showResultsWindow.append(cardNameDisplay, cardImageDisplay);
              cardImageDisplay.onclick = function () {
                let cardSelectedDisplayInfo = document.getElementById('card-selected-info');
                cardSelectedDisplayInfo.innerText = `"${card.name}" from Set "${card.setName}".`;
                document.getElementById('display-card-options').style.display = "none";
                cardSelected = card;
              };
            });
          }
        }
        document.getElementById('display-card-options').style.display = "block";
      }
    };

    // Display a message on the selecting card box when no card found, too many cards result, or incorrect name entered.
    function errorFecthingCard(showResultsWindow, errorMessage) {
      
      let displayErrorMessage = document.createElement('span');
      displayErrorMessage.innerText = errorMessage;
      showResultsWindow.appendChild(displayErrorMessage);
    }

    const addCardToCollection = async function() {
      
      if (cardSelected === undefined) {
        alert("Select a card to add it to your collection.");
      } else {
        
        const response = await fetch('save_card', {
          method: 'POST',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            multiverseId: cardSelected.multiverseid,
            userId: currentUserId,
            card_Name: cardSelected.name,
            manaCost: cardSelected.manaCost,
            cardText: cardSelected.text,
            cardType: cardSelected.type,
            cardSubtype: cardSelected.subtypes,
            setName: cardSelected.setName,
            power: cardSelected.power !== undefined ? cardSelected.power : null,
            toughness: (cardSelected.toughness !== undefined ? cardSelected.toughness : null),
            cardImage: cardSelected.imageUrl,
            copies: document.getElementById('num-of-copies').value,
            foiled: (() => {
              let radios = document.getElementsByName('foiled');
              for (var radio of radios) {
                if (radio.checked) {
                  return radio.value;
                }
              }
            })()
          })
        });

        const result = await response.text();
        alert(result);
        populateCardTable();
        console.log(response);
      }

    };

    // get access to the form subbmitted.
    const form1 = document.getElementById('filter');

    form1.addEventListener('submit', (event) => {
      event.preventDefault();
      var red_mana = form1.elements[1];
      var black_mana = form1.elements[2];
      var blue_mana = form1.elements[3];
      var white_mana = form1.elements[4];
      var green_mana = form1.elements[5];
      var none_mana = form1.elements[6];

      if (red_mana.checked){
        if (document.getElementById('red_card').style.display="none"){
          document.getElementById('red_card').style.display="table-cell";
        } 
        if (black_mana.checked) {
          document.getElementById('black_card').style.display="table-cell";
        } else {
          document.getElementById('black_card').style.display="none";
        }
        if (blue_mana.checked) {
          document.getElementById('blue_card').style.display="table-cell";
        } else {
          document.getElementById('blue_card').style.display="none";
        }
        if (white_mana.checked) {
          document.getElementById('white_card').style.display="table-cell";
        } else {
          document.getElementById('white_card').style.display="none";
        }
        if (green_mana.checked) {
          document.getElementById('green_card').style.display="table-cell";
        } else {
          document.getElementById('green_card').style.display="none";
        } 
        if (none_mana.checked) {
          document.getElementById('none_card').style.display="table-cell";
        } else {
          document.getElementById('none_card').style.display="none";
        }
      } else if (black_mana.checked){
        if (document.getElementById('black_card').style.display="none"){
          document.getElementById('black_card').style.display="table-cell";
        }
        if (blue_mana.checked) {
          document.getElementById('blue_card').style.display="table-cell";
        } else {
          document.getElementById('blue_card').style.display="none";
        }
        if (white_mana.checked) {
          document.getElementById('white_card').style.display="table-cell";
        } else {
          document.getElementById('white_card').style.display="none";
        }
        if (green_mana.checked) {
          document.getElementById('green_card').style.display="table-cell";
        } else {
          document.getElementById('green_card').style.display="none";
        } 
        if (none_mana.checked) {
          document.getElementById('none_card').style.display="table-cell";
        } else {
          document.getElementById('none_card').style.display="none";
        }
        document.getElementById('red_card').style.display="none";
      } else if (blue_mana.checked){
        if (document.getElementById('blue_card').style.display="none"){
          document.getElementById('blue_card').style.display="table-cell";
        }
        if (white_mana.checked) {
          document.getElementById('white_card').style.display="table-cell";
        } else {
          document.getElementById('white_card').style.display="none";
        }
        if (green_mana.checked) {
          document.getElementById('green_card').style.display="table-cell";
        } else {
          document.getElementById('green_card').style.display="none";
        } 
        if (none_mana.checked) {
          document.getElementById('none_card').style.display="table-cell";
        } else {
          document.getElementById('none_card').style.display="none";
        }
        document.getElementById('red_card').style.display="none";
        document.getElementById('black_card').style.display="none";
      } else if (white_mana.checked){
        if (document.getElementById('white_card').style.display="none"){
          document.getElementById('white_card').style.display="table-cell";
        }
        if (green_mana.checked) {
          document.getElementById('green_card').style.display="table-cell";
        } else {
          document.getElementById('green_card').style.display="none";
        } 
        if (none_mana.checked) {
          document.getElementById('none_card').style.display="table-cell";
        } else {
          document.getElementById('none_card').style.display="none";
        }
        document.getElementById('red_card').style.display="none";
        document.getElementById('black_card').style.display="none";
        document.getElementById('blue_card').style.display="none";
      } else if (green_mana.checked){
        if (document.getElementById('green_card').style.display="none"){
          document.getElementById('green_card').style.display="table-cell";
        }
        if (none_mana.checked) {
          document.getElementById('none_card').style.display="table-cell";
        } else {
          document.getElementById('none_card').style.display="none";
        }
        document.getElementById('red_card').style.display="none";
        document.getElementById('black_card').style.display="none";
        document.getElementById('blue_card').style.display="none";
        document.getElementById('white_card').style.display="none";
      } else if (none_mana.checked){
        if (document.getElementById('none_card').style.display="none"){
          document.getElementById('none_card').style.display="table-cell";
        }
        document.getElementById('red_card').style.display="none";
        document.getElementById('black_card').style.display="none";
        document.getElementById('blue_card').style.display="none";
        document.getElementById('white_card').style.display="none";
        document.getElementById('green_card').style.display="none";
      } else {
        document.getElementById('red_card').style.display="none";
        document.getElementById('black_card').style.display="none";
        document.getElementById('blue_card').style.display="none";
        document.getElementById('white_card').style.display="none";
        document.getElementById('green_card').style.display="none";
        document.getElementById('none_card').style.display="none";
      }
    });

    const form2 = document.getElementById('sort');

    form2.addEventListener('submit', (event) => {
      event.preventDefault();
      var choice = form2.elements[1];
      var list, i, switching, b, should_switch;
      list = document.getElementById("cards_row");
      switching = true

      if (choice.value === "Sort") {
        alert("Please pick an option to sort by.")
      } else if (choice.value === "Mana cost"){
        while (switching) {
          switching = false;
          b = list.getElementsByTagName("DIV");
          for (i = 0; i < (b.length - 1); i++) {
            should_switch = false;
            var str1 = b[i].innerHTML.toString();
            var str2 = b[i+1].innerHTML.toString();
            var matches1 = str1.match(/(\d+)/)[0];
            var matches2 = str2.match(/(\d+)/)[0];
            if (matches1 > matches2){
              should_switch= true;
              break;
            }
          }
          if (should_switch) {
            b[i].parentNode.insertBefore(b[i + 1], b[i]);
            switching = true;
          }
        }
      } else if (choice.value === "Name"){
        while (switching) {
          switching = false;
          b = list.getElementsByTagName("DIV");
          for (i = 0; i < (b.length - 1); i++) {
            should_switch = false;
            var str1 = b[i].innerHTML.toString();
            var str2 = b[i+1].innerHTML.toString();
            var cleaned1 = str1.replace(/[0-9]/g, '');
            var cleaned2 = str2.replace(/[0-9]/g, '');
            if (cleaned1 > cleaned2){
              should_switch= true;
              break;
            }
          }
          if (should_switch) {
            b[i].parentNode.insertBefore(b[i + 1], b[i]);
            switching = true;
          }
        }
      } 
    })

  </script>
</body>
</html>